#!/bin/bash

printUsage() {
    echo "calc-folder-hash -a (md5|sha1|sha224|sha256|sha384|sha512) [-pat \"*.mkv\"] ~/dir1 /dir2 â€¦"
    exit 1
}

containsElement () {
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

if [ $# -lt 3 -o "$1" = "-h" ]; then
    printUsage
fi

while [[ "$1" == -* ]]; do
    # $1 starts with - => $1 is hopefully a parameter not a directory ;)
    if [ "$1" = "-a" ]; then
        shift
        case "$1" in
            md5)
                readonly HASH_EXEC="$(which gmd5sum)"
                readonly HASHFILE_EXT="md5"
                ;;
            sha1)
                readonly HASH_EXEC="$(which gsha1sum)"
                readonly HASHFILE_EXT="sha1"
                ;;
            sha224)
                readonly HASH_EXEC="$(which gsha224sum)"
                readonly HASHFILE_EXT="sha224"
                ;;
            sha256)
                readonly HASH_EXEC="$(which gsha256sum)"
                readonly HASHFILE_EXT="sha256"
                ;;
            sha384)
                readonly HASH_EXEC="$(which gsha384sum)"
                readonly HASHFILE_EXT="sha384"
                ;;
            sha512)
                readonly HASH_EXEC="$(which gsha512sum)"
                readonly HASHFILE_EXT="sha512"
                ;;
            *)
                printUsage
                ;;
        esac
        shift
    elif [ "$1" = "-pat" ]; then
        shift
        readonly SEARCH_PATTERN="$1"
        shift
    else
        printUsage
    fi
done

if [ -z "$HASH_EXEC" ]; then
    # -a wasn't passed as argument
    printUsage
fi

if [ -z "$SEARCH_PATTERN" ]; then
    readonly SEARCH_PATTERN="*"
fi

readonly REGEX="([a-fA-F0-9]+)\ +(.+)"

for param in "$@"; do
    filesToHash=()
    if [ ! -d $param ]; then
        echo "$param isn't a directory"
    else
        echo "Processing $param"
        cd "$param"
        hashFileName="$(basename "$(pwd)").$HASHFILE_EXT"
        if [ -f "$hashFileName" ]; then
            # make a list of files that are already in the hash file
            filesInHashFile=()
            while read line; do
                [[ "$line" =~ $REGEX ]]
                fileName="${BASH_REMATCH[2]}"
                if [ ! -z "$fileName" ]; then
                    filesInHashFile+=("$fileName")
                fi
            done < "$hashFileName"
        fi
        # add all files that match SEARCH_PATTERN and are not in filesInHashFile to filesToHash
        for file in $SEARCH_PATTERN; do
            if [ "$file" != "$SEARCH_PATTERN" ]; then
                if ! containsElement "$file" "${filesInHashFile[@]}"; then
                    filesToHash+=("$file")
                fi
            fi
        done

        # output files to hash
        echo
        echo "going to add ${#filesToHash[@]} file(s) to $hashFileName:"
        for fileToHash in "${filesToHash[@]}"; do
            echo "$fileToHash"
        done

        echo
        # hash files
        filesToHashLength=${#filesToHash[@]}
        maxIndex=$(($filesToHashLength-1))
        for i in $(seq 0 $maxIndex); do
            fileToHash="${filesToHash[$i]}"
            infoString=$(echo -n "File $((i+1))/$filesToHashLength ")
            echo -n "$infoString"
            echo-progress-bar $i $filesToHashLength $(( $(tput cols)-${#infoString} ))
            
            hashOutput=$(pv -pr "$fileToHash" | "$HASH_EXEC")
            [[ "$hashOutput" =~ $REGEX ]]
            hashSum="${BASH_REMATCH[1]}"
            echo "$hashSum  $fileToHash" >> "$hashFileName"

            # move cursor up 2
            echo -ne "\033[2A"
        done
        # draw finished progress bar
        infoString=$(echo -n "File $filesToHashLength/$filesToHashLength ")
        echo -n "$infoString"
        echo-progress-bar 1 1 $(( $(tput cols)-${#infoString} ))
        echo -ne "\033[K"
    fi
done
exit 0
